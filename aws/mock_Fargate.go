// Code generated by mockery v1.1.0. DO NOT EDIT.

package aws

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockFargate is an autogenerated mock type for the Fargate type
type MockFargate struct {
	mock.Mock
}

// GetContainerIP provides a mock function with given fields: ctx, taskARN, cluster, usePublicIP
func (_m *MockFargate) GetContainerIP(ctx context.Context, taskARN string, cluster string, usePublicIP bool) (string, error) {
	ret := _m.Called(ctx, taskARN, cluster, usePublicIP)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) string); ok {
		r0 = rf(ctx, taskARN, cluster, usePublicIP)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool) error); ok {
		r1 = rf(ctx, taskARN, cluster, usePublicIP)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields:
func (_m *MockFargate) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunTask provides a mock function with given fields: ctx, taskSettings, connection
func (_m *MockFargate) RunTask(ctx context.Context, taskSettings TaskSettings, connection ConnectionSettings) (string, error) {
	ret := _m.Called(ctx, taskSettings, connection)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, TaskSettings, ConnectionSettings) string); ok {
		r0 = rf(ctx, taskSettings, connection)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, TaskSettings, ConnectionSettings) error); ok {
		r1 = rf(ctx, taskSettings, connection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopTask provides a mock function with given fields: ctx, taskARN, cluster
func (_m *MockFargate) StopTask(ctx context.Context, taskARN string, cluster string) error {
	ret := _m.Called(ctx, taskARN, cluster)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, taskARN, cluster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilTaskRunning provides a mock function with given fields: ctx, taskARN, cluster
func (_m *MockFargate) WaitUntilTaskRunning(ctx context.Context, taskARN string, cluster string) error {
	ret := _m.Called(ctx, taskARN, cluster)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, taskARN, cluster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
