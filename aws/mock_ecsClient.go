// Code generated by mockery v1.1.0. DO NOT EDIT.

package aws

import (
	context "context"

	ecs "github.com/aws/aws-sdk-go/service/ecs"
	mock "github.com/stretchr/testify/mock"

	request "github.com/aws/aws-sdk-go/aws/request"
)

// mockEcsClient is an autogenerated mock type for the ecsClient type
type mockEcsClient struct {
	mock.Mock
}

// DescribeTasksWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockEcsClient) DescribeTasksWithContext(_a0 context.Context, _a1 *ecs.DescribeTasksInput, _a2 ...request.Option) (*ecs.DescribeTasksOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ecs.DescribeTasksOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeTasksInput, ...request.Option) *ecs.DescribeTasksOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DescribeTasksOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DescribeTasksInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunTaskWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockEcsClient) RunTaskWithContext(_a0 context.Context, _a1 *ecs.RunTaskInput, _a2 ...request.Option) (*ecs.RunTaskOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ecs.RunTaskOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.RunTaskInput, ...request.Option) *ecs.RunTaskOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.RunTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ecs.RunTaskInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopTaskWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockEcsClient) StopTaskWithContext(_a0 context.Context, _a1 *ecs.StopTaskInput, _a2 ...request.Option) (*ecs.StopTaskOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ecs.StopTaskOutput
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.StopTaskInput, ...request.Option) *ecs.StopTaskOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.StopTaskOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ecs.StopTaskInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitUntilTasksRunningWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockEcsClient) WaitUntilTasksRunningWithContext(_a0 context.Context, _a1 *ecs.DescribeTasksInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeTasksInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
